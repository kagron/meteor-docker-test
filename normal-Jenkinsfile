node {
    def app
    def tag
    def dockerfile = "./meteor/test-app/Dockerfile"
    def repositoryOwner = "kgrondin01"
    def imageName = "test-app"
    def repositoryUri = "registry.hub.docker.com"
    def isRelease = (env.BRANCH_NAME =~ /release\/.*/)

    stage('Install dependencies') {
        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm
        docker.image('node:13.14').inside{
            /* 
             * Install depdencies inside a node container.  By default
             * the current directory is mounted to the docker container
             */
            dir('./meteor/test-app') {
                sh 'npm install'
            }
        }
    }

    stage('Run Tests') {
        docker.image('node:13.14').inside {
            /* Since the directory was mounted above, our node_modules will be in the
             * directory and we can spin up the container to now run tests
             */
            dir('./meteor/test-app') {
                sh 'npm run test-ci'
            }
        }
    }

    stage('Build image') {
        if (isRelease) {
            /* This builds the actual image; synonymous to
            * docker build on the command line */
            tag = env.BRANCH_NAME?.split("/")[1]
            app = docker.build(
                "${repositoryOwner}/${imageName}",
                "--build-arg NODE_ENV=production " +
                "--build-arg MONGO_URL=mongodb://mongo:27017/${imageName} " +
                "-f ${dockerfile} ./meteor/test-app"
            )
        } else {
            echo 'Skipping image build'
        }
    }

    stage('Push image') {
        if (isRelease) {
            /* Finally, we'll push the image with two tags:
            * First, the tag from the branch name (semantic versioning hopefully)
            * Second, the 'latest' tag.
            * Pushing multiple tags is cheap, as all the layers are reused. */
            docker.withRegistry("https://${repositoryUri}", 'personal-dockerhub') {
                app.push("${tag}")
                app.push("latest")
            }
        } else {
            echo 'Skipping image push'
        }
    }

    stage('Remove images') {
        if (isRelease) {
            sh "docker rmi ${repositoryOwner}/${imageName} ${repositoryUri}/${repositoryOwner}/${imageName} ${repositoryUri}/${repositoryOwner}/${imageName}:${tag}"
        } else {
            echo 'Skipping image removal'
        }
    }
}